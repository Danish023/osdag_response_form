<?php
/**
 * Defines total number of form steps.
 */
define('ddcl_osdag_response_form_TOTAL_STEPS', 6);
/**
 * Implements hook_menu().
 */
function osdag_response_form_menu()
{
	$items = array();
	// Form page.
	$items['ddcl-osdag-response/form'] = array(
		'title' => t('Test Form'),
		'page callback' => 'ddcl_osdag_response_form_page',
		'page arguments' => array(),
		'access arguments' => array(
			'access osdag_feedback_form'
		)
	);
	// Success page.
	$items['ddcl-osdag-response/success'] = array(
		'title' => t('Test successful!'),
		'page callback' => 'test_success',
		'page arguments' => array(),
		'access arguments' => array(
			'access osdag_feedback_form'
		)
	);
	return $items;
}
function osdag_response_form_permission()
{
	return array(
		"access osdag_feedback_form" => array(
			"title" => t("osdag feedback form"),
			"description" => t("Allows users to view osdag feedback form")
		)
	);
}
/**
 * Fetches and displays the form.
 */
function ddcl_osdag_response_form_page()
{
	return drupal_get_form('ddcl_osdag_response_form');
}
/**
 * Displays simple confirmation page after finishing the whole process.
 */
function test_success()
{
	return 'OK!';
}
/**
 * Generates the form.
 */
function ddcl_osdag_response_form($form, &$form_state, $no_js_use = FALSE)
{
	// Set current step to 1 if user just starts the process.
	if (!isset($form_state['storage']['step']))
	{
		$form_state['storage']['step'] = 1;
	} //!isset($form_state['storage']['step'])
	switch ($form_state['storage']['step'])
	{
		case 1:
			// Custom page title.
			drupal_set_title('Step 1');
			// All the real form fields.
			$form['step1_field1_name'] = array(
				'#title' => 'Name',
				'#type' => 'textfield',
				'#default_value' => $form_state['storage']['values'][1]['step1_field1_name']
			);
			$form['step1_field2_institute'] = array(
				'#title' => 'Institute / Company',
				'#type' => 'textfield',
				'#default_value' => $form_state['storage']['values'][1]['step1_field2_institute']
			);
			$form['step1_field3_current_position'] = array(
				'#title' => 'Current position',
				'#type' => 'textfield',
				'#default_value' => $form_state['storage']['values'][1]['step1_field3_current_position']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			break;
		case 2:
			// Custom page title.
			drupal_set_title('Step 2');
			// All the real form fields.
			$form['step2_field1_fieldset'] = array(
				'#type' => 'fieldset',
				'#tree' => TRUE,
				'#prefix' => '<div id="step2-field1-fieldset-wrapper">',
				'#suffix' => '</div>'
			);
			if (empty($form_state['num_comment']))
			{
				$form_state['num_comment'] = 1;
			} //empty($form_state['num_comment'])
			$form['step2_field1_fieldset']['step2_field1_what_should_be_the_minimum_length_of_the_connected_leg_of_the_seated_angle'] = array(
				'#title' => 'What should be the minimum length of the connected leg (to the support) of the seated angle?',
				'#type' => 'select',
				'#options' => array(
					'100mm' => '100mm',
					'150mm' => '150mm',
					'Any other recommendation' => 'Any other recommendation'
				),
				'#default_value' => $form_state['storage']['values'][2]['step2_field1_what_should_be_the_minimum_length_of_the_connected_leg_of_the_seated_angle']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			$temp = 0;
			for ($i = 0; $i < $form_state['num_comment']; $i++)
			{
				$temp1 = $i;
				$form['step2_field1_fieldset'][$i]["comment"] = array(
					"#type" => "textarea",
					"#title" => "Comment " . ($temp1 + 1),
					"#default_value" => ""
				);
			} //$i = 0; $i < $form_state['num_comment']; $i++
			$form["comment_count"] = array(
				"#type" => "hidden",
				"#value" => $temp1
			);
			$form['step2_field1_fieldset']['add_comment'] = array(
				'#type' => 'submit',
				'#value' => t('Add comment'),
				'#limit_validation_errors' => array(),
				'#submit' => array(
					'comment_add_more_add_one'
				),
				'#ajax' => array(
					'callback' => 'comment_add_more_callback',
					'wrapper' => 'step2-field1-fieldset-wrapper'
				)
			);
			if ($form_state['num_comment'] > 1)
			{
				$form['step2_field1_fieldset']['remove_comment'] = array(
					'#type' => 'submit',
					'#value' => t('Remove comment'),
					'#limit_validation_errors' => array(),
					'#submit' => array(
						'comment_add_more_remove_one'
					),
					'#ajax' => array(
						'callback' => 'comment_add_more_callback',
						'wrapper' => 'step2-field1-fieldset-wrapper'
					)
				);
			} //$form_state['num_comment'] > 1
			if ($no_js_use)
			{
				if (!empty($form['step2_field1_fieldset']['remove_comment']['#ajax']))
				{
					unset($form['step2_field1_fieldset']['remove_comment']['#ajax']);
				} //!empty($form['step2_field1_fieldset']['remove_comment']['#ajax'])
				unset($form['step2_field1_fieldset']['add_comment']['#ajax']);
			} //$no_js_use
			break;
		case 3:
			// Custom page title.
			drupal_set_title('Step 3');
			// All the real form fields.
			$form['step3_field1_what_should_be_the_minimum_thickness_of_the_seated_angle'] = array(
				'#title' => 'What should be the minimum thickness of the seated angle?',
				'#type' => 'textfield',
				'#default_value' => $form_state['storage']['values'][3]['step3_field1_what_should_be_the_minimum_thickness_of_the_seated_angle']
			);
			$form['step3_field2_what_code_provision_reference_text_should_be_referred_for_this'] = array(
				'#title' => 'What code provision(/s)/ reference text should be referred for this?',
				'#type' => 'textfield',
				'#default_value' => $form_state['storage']['values'][3]['step3_field2_what_code_provision_reference_text_should_be_referred_for_this']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			break;
		case 4:
			// Custom page title.
			drupal_set_title('Step 4');
			// All the real form fields.
			$form['step4_field1_the_moment_capacity_of_the_outstanding_leg_should_be_based_on'] = array(
				'#title' => 'The moment capacity of the outstanding leg should be based on',
				'#type' => 'radios',
				'#options' => array(
					'Plastic Moment Capacity (with Plastic Section Modulus)' => 'Plastic Moment Capacity (with Plastic Section Modulus)',
					'Elastic Moment Capacity (with Elastic Section Modulus)' => 'Elastic Moment Capacity (with Elastic Section Modulus)'
				),
				'#default_value' => $form_state['storage']['values'][4]['step4_field1_the_moment_capacity_of_the_outstanding_leg_should_be_based_on']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			break;
		case 5:
			// Custom page title.
			drupal_set_title('Step 5');
			// All the real form fields.
			$form['step5_field1_should_the_vertical_leg_of_the_seated_angle_be_checked_against_buckling'] = array(
				'#title' => 'The moment capacity of the outstanding leg should be based on',
				'#type' => 'radios',
				'#options' => array(
					'Yes' => 'Yes',
					'No' => 'No'
				),
				'#default_value' => $form_state['storage']['values'][5]['step5_field1_should_the_vertical_leg_of_the_seated_angle_be_checked_against_buckling']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			break;
		case 6:
			// Custom page title.
			drupal_set_title('Step 6');
			// All the real form fields.
			$form['step6_field1_need_guidelines_for_specifying_nominal_size_of_top_cleata_angle'] = array(
				'#title' => 'Need guidelines for specifying Nominal Size of Top Cleat (/Clip) Angle',
				'#type' => 'radios',
				'#options' => array(
					'ISA 100 65x6 (include exact dim)' => 'ISA 100 65x6 (include exact dim)',
					'ISA 100 65x8 (include exact dim)' => 'ISA 100 65x8 (include exact dim)',
					'Any other recommendation' => 'Any other recommendation'
				),
				'#default_value' => $form_state['storage']['values'][6]['step6_field1_need_guidelines_for_specifying_nominal_size_of_top_cleata_angle']
			);
			// Add submit button(s).
			$form += _test_add_submit_buttons($form_state);
			// Not important - used only for displaying values posted so far.
			$form['posted_values'] = array(
				'#type' => 'markup',
				'#value' => _test_display_posted_values($form_state)
			);
			break;
	} //$form_state['storage']['step']
	return $form;
}
/**
 * Handles submitted form.
 */
function ddcl_osdag_response_form_submit($form, &$form_state)
{
	// Save all posted values for $form_state['storage']
	// to make them available in all other steps.
	$form_state['storage']['values'][$form_state['storage']['step']] = $form_state['values'];
	// Deal with current step based on which submit button was clicked.
	switch ($form_state['clicked_button']['#id'])
	{
		case 'edit-next':
			// Do not finally submit the form yet, rebuild it instead.
			$form_state['rebuild'] = TRUE;
			// Go to next step.
			$form_state['storage']['step']++;
			break;
		case 'edit-prev':
			// Do not finally submit the form yet, rebuild it instead.
			$form_state['rebuild'] = TRUE;
			// Go to previous step.
			$form_state['storage']['step']--;
			break;
		case 'edit-finish':
			// Do something with all form values ($form_state['storage']) before unsetting it.
			//
			$query = "INSERT INTO {ddcl_osdag_response_form_result} (name,institute,current_position) VALUES (:name,:institute,:current_position)";
			$args = array(
				":name" => $form_state['storage']['values'][1]['step1_field1_name'],
				":institute" => $form_state['storage']['values'][1]['step1_field2_institute'],
				":current_position" => $form_state['storage']['values'][1]['step1_field3_current_position']
			);
			db_query($query, $args);
			// And then unset it.
			unset($form_state['storage']);
			// This was the final step, so redirect to success page.
			//$form['#submit'][] = 'ddcl_osdag_response_form_storage_submit';
			$form_state['redirect'] = 'ddcl-osdag-response/success';
			break;
	} //$form_state['clicked_button']['#id']
}
/**
 * Adds relevant submit buttons based on current step.
 */
function _test_add_submit_buttons($form_state)
{
	$buttons = array();
	// Display 'Prev' button on all steps excluding first.
	if ($form_state['storage']['step'] > 1)
	{
		$buttons['prev'] = array(
			'#type' => 'submit',
			'#value' => 'Prev'
		);
	} //$form_state['storage']['step'] > 1
	// Display 'Next' button on all steps excluding last.
	if ($form_state['storage']['step'] < ddcl_osdag_response_form_TOTAL_STEPS)
	{
		$buttons['next'] = array(
			'#type' => 'submit',
			'#value' => 'Next'
		);
	} //$form_state['storage']['step'] < ddcl_osdag_response_form_TOTAL_STEPS
	// Display 'Finish' button on the last step.
	if ($form_state['storage']['step'] == ddcl_osdag_response_form_TOTAL_STEPS)
	{
		$buttons['finish'] = array(
			'#type' => 'submit',
			'#value' => 'Finish'
		);
	} //$form_state['storage']['step'] == ddcl_osdag_response_form_TOTAL_STEPS
	return $buttons;
}
/**
 * Displays values posted so far beneath the form.
 */
function _test_display_posted_values($form_state)
{
	$output = '<p>Posted values:</p>';
	$output .= '<p>Step 1 field 1: ' . $form_state['storage']['values'][1]['step1_field1_name'] . '</p>';
	$output .= '<p>Step 2 field 1: ' . $form_state['storage']['values'][2]['step2_field1_what_should_be_the_minimum_length_of_the_connected_leg_of_the_seated_angle'] . '</p>';
	$output .= '<p>Step 3 field 1: ' . $form_state['storage']['values'][3]['step3_field2_what_code_provision_reference_text_should_be_referred_for_this'] . '</p>';
	$output .= '<p>Step 4 field 1: ' . $form_state['storage']['values'][4]['step4_field1_the_moment_capacity_of_the_outstanding_leg_should_be_based_on'] . '</p>';
	$output .= '<p>Step 5 field 1: ' . $form_state['storage']['values'][5]['step5_field1_should_the_vertical_leg_of_the_seated_angle_be_checked_against_buckling'] . '</p>';
	return $output;
}
function comment_add_more_add_one($form, &$form_state)
{
	$form_state['num_comment']++;
	$form_state['rebuild'] = TRUE;
	//$form_state['no_redirect'] = TRUE;
}
function comment_add_more_remove_one($form, &$form_state)
{
	if ($form_state['num_comment'] > 1)
	{
		$form_state['num_comment']--;
	} //$form_state['num_comment'] > 1
	$form_state['rebuild'] = TRUE;
}
function comment_add_more_callback($form, $form_state)
{
	return $form['step2_field1_fieldset'];
}
